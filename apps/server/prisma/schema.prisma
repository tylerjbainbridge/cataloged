generator prisma {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

model InviteCode {
  id        String   @default(cuid()) @id
  code      String
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InterestedUser {
  id        String   @default(cuid()) @id
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id                  String       @default(cuid()) @id
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  extension           String       @default("")
  hasStartedUploading Boolean?
  height              Int?
  isFailed            Boolean?
  isUploaded          Boolean?
  item                Item?
  name                String       @default("")
  size                Int?
  contentType         String?
  title               String       @default("")
  description         String       @default("")
  uploadGroupId       String?
  uploadGroup         UploadGroup? @relation(fields: [uploadGroupId], references: [id])
  userId              String?
  user                User?        @relation(fields: [userId], references: [id])
  width               Int?

  @@index([name, title, description, extension, isUploaded, isFailed])
}

model GoogleAccount {
  id             String          @default(cuid()) @id
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  accountId      String?         @unique
  email          String?
  firstName      String?
  lastName       String?
  picture        String?
  refreshToken   String?
  accessToken    String?
  expiresAt      DateTime
  isAuthMethod   Boolean?
  metadata       String?
  userId         String?
  user           User?           @relation(fields: [userId], references: [id])
  googleContacts GoogleContact[]
}

model GoogleContact {
  id                String         @default(cuid()) @id
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  resourceName      String
  name              String?
  email             String?
  otherEmails       String[]
  phoneNumber       String?
  otherPhoneNumbers String[]
  companyTitle      String?
  companyName       String?
  photoUrl          String?
  userId            String?
  user              User?          @relation(fields: [userId], references: [id])
  item              Item
  googleAccountId   String?
  googleAccount     GoogleAccount? @relation(fields: [googleAccountId], references: [id])

  @@index([name, email, companyName, companyTitle])
}

model SavedSearch {
  id        String              @default(cuid()) @id
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  name      String
  version   Int
  userId    String?
  user      User?               @relation(fields: [userId], references: [id])
  filters   SavedSearchFilter[]
}

model SavedSearchFilter {
  id            String       @default(cuid()) @id
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  name          String
  operator      String?
  value         String?
  values        String?
  userId        String?
  user          User?        @relation(fields: [userId], references: [id])
  savedSearchId String?
  savedSearch   SavedSearch? @relation(fields: [savedSearchId], references: [id])
}

model Collection {
  id          String            @default(cuid()) @id
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  name        String
  description String?
  entries     CollectionEntry[]
  items       Item[]
  userId      String?
  user        User?             @relation(fields: [userId], references: [id])
}

model CollectionBlock {
  id           String      @default(cuid()) @id
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  type         String
  content      String
  collectionId String?
  collection   Collection? @relation(fields: [collectionId], references: [id])
  userId       String?
  user         User?       @relation(fields: [userId], references: [id])
}

model CollectionEntry {
  id           String           @default(cuid()) @id
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  itemId       String?
  item         Item?            @relation(fields: [itemId], references: [id])
  blockId      String?
  block        CollectionBlock? @relation(fields: [blockId], references: [id])
  collectionId String?
  collection   Collection?      @relation(fields: [collectionId], references: [id])
  position     Int?
  userId       String?
  user         User?            @relation(fields: [userId], references: [id])
}

// itemId          String?
model Item {
  id                String            @default(cuid()) @id
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?
  isFavorited       Boolean           @default(false)
  status            String?           @default("NOT_STARTED")
  type              String            @default("")
  date              DateTime          @default(now())
  linkId            String?
  link              Link?             @relation(fields: [linkId], references: [id])
  noteId            String?
  note              Note?             @relation(fields: [noteId], references: [id])
  fileId            String?
  file              File?             @relation(fields: [fileId], references: [id])
  googleContactId   String?
  googleContact     GoogleContact?    @relation(fields: [googleContactId], references: [id])
  userId            String?
  user              User?             @relation(fields: [userId], references: [id])
  labels            Label[]           @relation(references: [id])
  collectionEntries CollectionEntry[] @relation(references: [id])
  collections       Collection[]      @relation(references: [id])
  ownedBy           Item[]            @relation("ItemToItem", references: [id])
  items             Item[]            @relation("ItemToItem", references: [id])

  @@index([type, status, isFavorited, deletedAt])
}

model Label {
  id        String   @default(cuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @default("")
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  items     Item[]   @relation(references: [id])

  @@index([name])
}

model Link {
  id               String   @default(cuid()) @id
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  description      String?
  favicon          String?
  logo             String?
  href             String   @default("")
  host             String?  @default("")
  image            String?
  notes            String   @default("")
  title            String?
  isIframeDisabled Boolean  @default(false)
  userId           String?
  user             User?    @relation(fields: [userId], references: [id])
  item             Item?

  @@index([href, title, description])
}

model Note {
  id        String   @default(cuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String?  @default("")
  raw       String   @default("")
  text      String   @default("")
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  item      Item?

  @@index([title, text])
}

model UploadGroup {
  id         String   @default(cuid()) @id
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isComplete Boolean?
  isFailed   Boolean?
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  files      File[]
}

model User {
  id                 String              @default(cuid()) @id
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  lastVisitedAt      DateTime            @default(now())
  email              String              @default("") @unique
  firstName          String?
  lastName           String?
  files              File[]
  googleAccounts     GoogleAccount[]
  googleContacts     GoogleContact[]
  savedSearches      SavedSearch[]
  savedSearchFilters SavedSearchFilter[]
  collections        Collection[]
  collectionBlocks   CollectionBlock[]
  collectionEntries  CollectionEntry[]
  items              Item[]
  labels             Label[]
  links              Link[]
  notes              Note[]
  uploadGroups       UploadGroup[]
  role               String              @default("")
  isActive           Boolean             @default(false)
  inviteCodeId       String?
  inviteCode         InviteCode?         @relation(fields: [inviteCodeId], references: [id])
}