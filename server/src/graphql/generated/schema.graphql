### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Collection {
  createdAt: DateTime!
  id: ID!
  items(after: String, before: String, first: Int, last: Int, skip: Int): [Item!]
  name: String!
  updatedAt: DateTime!
}

input CollectionCreateManyWithoutCollectionsInput {
  connect: [CollectionWhereUniqueInput!]
  create: [CollectionCreateWithoutUserInput!]
}

input CollectionCreateWithoutUserInput {
  createdAt: DateTime
  id: ID
  items: ItemCreateManyWithoutItemsInput
  name: String!
  updatedAt: DateTime
}

input CollectionWhereUniqueInput {
  id: ID
}

"""DateTime"""
scalar DateTime

type File {
  createdAt: DateTime!
  extension: String!
  fullUrl: String!
  height: Int
  id: ID!
  isUploaded: Boolean
  name: String!
  size: String
  squareUrl: String!
  updatedAt: DateTime!
  uploadGroup: UploadGroup!
  width: Int
}

input FileCreateInput {
  createdAt: DateTime
  extension: String!
  height: Int
  id: ID
  isFailed: Boolean
  isUploaded: Boolean
  item: ItemCreateOneWithoutItemInput!
  name: String!
  size: String
  updatedAt: DateTime
  uploadGroup: UploadGroupCreateOneWithoutUploadGroupInput!
  user: UserCreateOneWithoutUserInput!
  width: Int
}

input FileCreateManyWithoutFilesInput {
  connect: [FileWhereUniqueInput!]
  create: [FileCreateWithoutUploadGroupInput!]
}

input FileCreateOneWithoutFileInput {
  connect: FileWhereUniqueInput
  create: FileCreateWithoutItemInput
}

input FileCreateWithoutItemInput {
  createdAt: DateTime
  extension: String!
  height: Int
  id: ID
  isFailed: Boolean
  isUploaded: Boolean
  name: String!
  size: String
  updatedAt: DateTime
  uploadGroup: UploadGroupCreateOneWithoutUploadGroupInput!
  user: UserCreateOneWithoutUserInput!
  width: Int
}

input FileCreateWithoutUploadGroupInput {
  createdAt: DateTime
  extension: String!
  height: Int
  id: ID
  isFailed: Boolean
  isUploaded: Boolean
  item: ItemCreateOneWithoutItemInput!
  name: String!
  size: String
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
  width: Int
}

input FileWhereUniqueInput {
  id: ID
}

input GoogleAccountCreateManyWithoutGoogleAccountsInput {
  connect: [GoogleAccountWhereUniqueInput!]
  create: [GoogleAccountCreateWithoutUserInput!]
}

input GoogleAccountCreateWithoutUserInput {
  accountId: String
  createdAt: DateTime
  email: String
  firstName: String
  id: ID
  lastName: String
  picture: String
  refreshToken: String
  updatedAt: DateTime
}

input GoogleAccountWhereUniqueInput {
  accountId: String
  id: ID
}

type InProgressUpload {
  signedUrls: [String!]!
  uploadGroup: UploadGroup
}

type Item {
  collections(after: String, before: String, first: Int, last: Int, skip: Int): [Collection!]
  createdAt: DateTime!
  file: File
  id: ID!
  link: Link
  type: String!
  updatedAt: DateTime!
}

input ItemCreateManyWithoutItemsInput {
  connect: [ItemWhereUniqueInput!]
  create: [ItemCreateWithoutUserInput!]
}

input ItemCreateOneWithoutItemInput {
  connect: ItemWhereUniqueInput
  create: ItemCreateWithoutLinkInput
}

input ItemCreateWithoutLinkInput {
  collections: CollectionCreateManyWithoutCollectionsInput
  createdAt: DateTime
  file: FileCreateOneWithoutFileInput
  id: ID
  type: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput
}

input ItemCreateWithoutUserInput {
  collections: CollectionCreateManyWithoutCollectionsInput
  createdAt: DateTime
  file: FileCreateOneWithoutFileInput
  id: ID
  link: LinkCreateOneWithoutLinkInput
  type: String!
  updatedAt: DateTime
}

input ItemWhereUniqueInput {
  id: ID
}

type JWT {
  token: String!
}

input KeyBlob {
  fileId: String!
}

type Link {
  createdAt: DateTime!
  description: String
  favicon: String
  href: String!
  id: ID!
  image: String
  item: Item!
  notes: String!
  title: String
  updatedAt: DateTime!
}

input LinkCreateManyWithoutLinksInput {
  connect: [LinkWhereUniqueInput!]
  create: [LinkCreateWithoutUserInput!]
}

input LinkCreateOneWithoutLinkInput {
  connect: LinkWhereUniqueInput
  create: LinkCreateWithoutItemInput
}

input LinkCreateWithoutItemInput {
  createdAt: DateTime
  description: String
  favicon: String
  href: String!
  id: ID
  image: String
  notes: String!
  title: String
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input LinkCreateWithoutUserInput {
  createdAt: DateTime
  description: String
  favicon: String
  href: String!
  id: ID
  image: String
  item: ItemCreateOneWithoutItemInput!
  notes: String!
  title: String
  updatedAt: DateTime
}

input LinkWhereUniqueInput {
  id: ID
}

type Mutation {
  createLink(href: String!): Link!
  createOneFile(data: FileCreateInput!): File!
  createOneUser(data: UserCreateInput!): User!
  deleteOneFile(where: FileWhereUniqueInput!): File
  generateSignedUrls(signedURLArgs: [SignedURLArgs!]): InProgressUpload!
  googleSignIn(code: String!): JWT!
  processFiles(uploadGroupId: String): [File!]!
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

enum OrderByArg {
  asc
  desc
}

type Query {
  _files(after: String, before: String, first: Int, last: Int, orderBy: QueryFindManyFileOrderByInput, skip: Int, where: QueryFindManyFileWhereInput): [File!]
  _items(after: String, before: String, first: Int, last: Int, orderBy: QueryFindManyItemOrderByInput, skip: Int, where: QueryFindManyItemWhereInput): [Item!]
  _uploadgroups(after: String, before: String, first: Int, last: Int, orderBy: QueryFindManyUploadGroupOrderByInput, skip: Int, where: QueryFindManyUploadGroupWhereInput): [UploadGroup!]
  file(where: FileWhereUniqueInput!): File
  googleURL: String!
  items(after: String, before: String, fileWhere: QueryFindManyFileWhereInput, first: Int, last: Int, orderBy: QueryFindManyItemOrderByInput, skip: Int, where: QueryFindManyItemWhereInput): [Item!]!
  me: User
  test: String!
  uploadGroups(after: String, before: String, first: Int, last: Int, orderBy: QueryFindManyUploadGroupOrderByInput, skip: Int, where: QueryFindManyUploadGroupWhereInput): [UploadGroup!]!
  users(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
}

input QueryFindManyFileFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input QueryFindManyFileOrderByInput {
  createdAt: OrderByArg
  extension: OrderByArg
  height: OrderByArg
  id: OrderByArg
  isFailed: OrderByArg
  isUploaded: OrderByArg
  name: OrderByArg
  size: OrderByArg
  updatedAt: OrderByArg
  width: OrderByArg
}

input QueryFindManyFileWhereInput {
  AND: [QueryFindManyFileWhereInput!]
  createdAt: QueryFindManyFileFilter
  extension: StringFilter
  height: QueryFindManyFileFilter
  id: StringFilter
  isFailed: QueryFindManyFileFilter
  isUploaded: QueryFindManyFileFilter
  item: QueryFindManyFileWhereInput
  name: StringFilter
  NOT: [QueryFindManyFileWhereInput!]
  OR: [QueryFindManyFileWhereInput!]
  size: NullableStringFilter
  updatedAt: QueryFindManyFileFilter
  uploadGroup: QueryFindManyFileWhereInput
  user: QueryFindManyFileWhereInput
  width: QueryFindManyFileFilter
}

input QueryFindManyItemFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input QueryFindManyItemOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  type: OrderByArg
  updatedAt: OrderByArg
}

input QueryFindManyItemWhereInput {
  AND: [QueryFindManyItemWhereInput!]
  collections: QueryFindManyItemFilter
  createdAt: QueryFindManyItemFilter
  file: QueryFindManyItemWhereInput
  id: StringFilter
  link: QueryFindManyItemWhereInput
  NOT: [QueryFindManyItemWhereInput!]
  OR: [QueryFindManyItemWhereInput!]
  type: StringFilter
  updatedAt: QueryFindManyItemFilter
  user: QueryFindManyItemWhereInput
}

input QueryFindManyUploadGroupFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input QueryFindManyUploadGroupOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  isComplete: OrderByArg
  isFailed: OrderByArg
  updatedAt: OrderByArg
}

input QueryFindManyUploadGroupWhereInput {
  AND: [QueryFindManyUploadGroupWhereInput!]
  createdAt: QueryFindManyUploadGroupFilter
  files: QueryFindManyUploadGroupFilter
  id: StringFilter
  isComplete: QueryFindManyUploadGroupFilter
  isFailed: QueryFindManyUploadGroupFilter
  NOT: [QueryFindManyUploadGroupWhereInput!]
  OR: [QueryFindManyUploadGroupWhereInput!]
  updatedAt: QueryFindManyUploadGroupFilter
  user: QueryFindManyUploadGroupWhereInput
}

input SignedURLArgs {
  key: String!
  name: String!
  type: String!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadGroup {
  createdAt: DateTime!
  files(after: String, before: String, first: Int, last: Int, skip: Int): [File!]
  id: ID!
  isComplete: Boolean
  updatedAt: DateTime!
}

input UploadGroupCreateManyWithoutUploadGroupsInput {
  connect: [UploadGroupWhereUniqueInput!]
  create: [UploadGroupCreateWithoutUserInput!]
}

input UploadGroupCreateOneWithoutUploadGroupInput {
  connect: UploadGroupWhereUniqueInput
  create: UploadGroupCreateWithoutFilesInput
}

input UploadGroupCreateWithoutFilesInput {
  createdAt: DateTime
  id: ID
  isComplete: Boolean
  isFailed: Boolean
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input UploadGroupCreateWithoutUserInput {
  createdAt: DateTime
  files: FileCreateManyWithoutFilesInput
  id: ID
  isComplete: Boolean
  isFailed: Boolean
  updatedAt: DateTime
}

input UploadGroupWhereUniqueInput {
  id: ID
}

type User {
  collections(after: String, before: String, first: Int, last: Int, skip: Int): [Collection!]
  email: String!
  files(after: String, before: String, first: Int, last: Int, skip: Int): [File!]
  firstName: String
  fullName: String!
  id: ID!
  items(after: String, before: String, first: Int, last: Int, skip: Int): [Item!]
  lastName: String
}

input UserCreateInput {
  collections: CollectionCreateManyWithoutCollectionsInput
  email: String!
  files: FileCreateManyWithoutFilesInput
  firstName: String
  googleAccounts: GoogleAccountCreateManyWithoutGoogleAccountsInput
  id: ID
  items: ItemCreateManyWithoutItemsInput
  lastName: String
  links: LinkCreateManyWithoutLinksInput
  uploadGroups: UploadGroupCreateManyWithoutUploadGroupsInput
}

input UserCreateOneWithoutUserInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutFilesInput
}

input UserCreateWithoutFilesInput {
  collections: CollectionCreateManyWithoutCollectionsInput
  email: String!
  firstName: String
  googleAccounts: GoogleAccountCreateManyWithoutGoogleAccountsInput
  id: ID
  items: ItemCreateManyWithoutItemsInput
  lastName: String
  links: LinkCreateManyWithoutLinksInput
  uploadGroups: UploadGroupCreateManyWithoutUploadGroupsInput
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
